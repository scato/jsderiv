/*
 * <strong>This is <em>not</em> the official ECMAScript Language Specification.</strong>
 * 
 * The official specification is the PDF document located at <a href="http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-262.pdf">http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-262.pdf</a>.
 * 
 * This HTML version was created from the original PDF version by a preposterous concatenation of hacks. It very likely contains errors and the official standard and errata are of course definitive. For copyright information, see <a href="#ecma-disclaimer">ECMA's legal disclaimer</a> in the document itself.
 * 
 * This version was created by Jason Orendorff and incorporates the official <a href="http://wiki.ecmascript.org/lib/exe/fetch.php?id=es3.1%3Aes3.1_proposal_working_draft&amp;cache=cache&amp;media=resources:es5_errata_7-31-10.pdf">errata</a> as of 31&nbsp;July 2010.
 * 
 * Last updated: 5 November 2010.
 * 
 * And then another hack was appended by Scato Eggen to create this file.
 */

<SourceCharacter> ::
    <any Unicode code unit>

<InputElementDiv> ::
    <WhiteSpace>
    <LineTerminator>
    <Comment>
    <Token>
    <DivPunctuator>

<InputElementRegExp> ::
    <WhiteSpace>
    <LineTerminator>
    <Comment>
    <Token>
    <RegularExpressionLiteral>

<WhiteSpace> ::
    <TAB>
    <VT>
    <FF>
    <SP>
    <NBSP>
    <BOM>
    <USP>

<LineTerminator> ::
    <LF>
    <CR>
    <LS>
    <PS>

<LineTerminatorSequence> ::
    <LF>
    <CR> [lookahead not in <LF>]
    <LS>
    <PS>
    <CR> <LF>

<Comment> ::
    <MultiLineComment>
    <SingleLineComment>

<MultiLineComment> ::
    "/*" <MultiLineCommentChars> [opt] "*/"

<MultiLineCommentChars> ::
    <MultiLineNotAsteriskChar> <MultiLineCommentChars> [opt]
    "*" <PostAsteriskCommentChars> [opt]

<PostAsteriskCommentChars> ::
    <MultiLineNotForwardSlashOrAsteriskChar> <MultiLineCommentChars> [opt]
    "*" <PostAsteriskCommentChars> [opt]

<MultiLineNotAsteriskChar> ::
    <SourceCharacter> but not /* asterisk */ "*"

<MultiLineNotForwardSlashOrAsteriskChar> ::
    <SourceCharacter> but not /* forward-slash */ "/" or /* asterisk */ "*"

<SingleLineComment> ::
    "//" <SingleLineCommentChars> [opt]

<SingleLineCommentChars> ::
    <SingleLineCommentChar> <SingleLineCommentChars> [opt]

<SingleLineCommentChar> ::
    <SourceCharacter> but not <LineTerminator>

<Token> ::
    <IdentifierName>
    <Punctuator>
    <NumericLiteral>
    <StringLiteral>

<Identifier> ::
    <IdentifierName> but not <ReservedWord>

<IdentifierName> ::
    <IdentifierStart>
    <IdentifierName> <IdentifierPart>

<IdentifierStart> ::
    <UnicodeLetter>
    "$"
    "_"
    "\\" <UnicodeEscapeSequence>

<IdentifierPart> ::
    <IdentifierStart>
    <UnicodeCombiningMark>
    <UnicodeDigit>
    <UnicodeConnectorPunctuation>
    <ZWNJ>
    <ZWJ>

<UnicodeLetter> ::
    <any character in the Unicode categories "Uppercase letter (Lu)", "Lowercase letter (Ll)", "Titlecase letter (Lt)", "Modifier letter (Lm)", "Other letter (Lo)", or "Letter number (Nl)".>

<UnicodeCombiningMark> ::
    <any character in the Unicode categories "Non-spacing mark (Mn)" or "Combining spacing mark (Mc)">

<UnicodeDigit> ::
    <any character in the Unicode category "Decimal number (Nd)">

<UnicodeConnectorPunctuation> ::
    <any character in the Unicode category "Connector punctuation (Pc)">

<ReservedWord> ::
    <Keyword>
    <FutureReservedWord>
    <NullLiteral>
    <BooleanLiteral>

<Keyword> :: one of
    "break" "do" "instanceof" "typeof" "case" "else" "new" "var" "catch" "finally" "return" "void" "continue" "for" "switch" "while" "debugger" "function" "this" "with" "default" "if" "throw" "Â " "delete" "in" "try"

<FutureReservedWord> :: one of
    "class" "enum" "extends" "super" "const" "export" "import"

<Punctuator> :: one of
    "{" "}" "(" ")" "[" "]" "." ";" "," "<" ">" "<=" ">=" "==" "!=" "===" "!==" "+" "-" "*" "%" "++" "--" "<<" ">>" ">>>" "&" "|" "^" "!" "~" "&&" "||" "?" ":" "=" "+=" "-=" "*=" "%=" "<<=" ">>=" ">>>=" "&=" "|=" "^="

<DivPunctuator> :: one of
    "/" "/="

<Literal> ::
    <NullLiteral>
    <BooleanLiteral>
    <NumericLiteral>
    <StringLiteral>
    <RegularExpressionLiteral>

<NullLiteral> ::
    "null"

<BooleanLiteral> ::
    "true"
    "false"

<NumericLiteral> ::
    <DecimalLiteral>
    <HexIntegerLiteral>

<DecimalLiteral> ::
    <DecimalIntegerLiteral> "." <DecimalDigits> [opt] <ExponentPart> [opt]
    "." <DecimalDigits> <ExponentPart> [opt]
    <DecimalIntegerLiteral> <ExponentPart> [opt]

<DecimalIntegerLiteral> ::
    "0"
    <NonZeroDigit> <DecimalDigits> [opt]

<DecimalDigits> ::
    <DecimalDigit>
    <DecimalDigits> <DecimalDigit>

<DecimalDigit> :: one of
    "0" "1" "2" "3" "4" "5" "6" "7" "8" "9"

<NonZeroDigit> :: one of
    "1" "2" "3" "4" "5" "6" "7" "8" "9"

<ExponentPart> ::
    <ExponentIndicator> <SignedInteger>

<ExponentIndicator> :: one of
    "e" "E"

<SignedInteger> ::
    <DecimalDigits>
    "+" <DecimalDigits>
    "-" <DecimalDigits>

<HexIntegerLiteral> ::
    "0x" <HexDigit>
    "0X" <HexDigit>
    <HexIntegerLiteral> <HexDigit>

<HexDigit> :: one of
    "0" "1" "2" "3" "4" "5" "6" "7" "8" "9" "a" "b" "c" "d" "e" "f" "A" "B" "C" "D" "E" "F"

<StringLiteral> ::
    "\"" <DoubleStringCharacters> [opt] "\""
    "'" <SingleStringCharacters> [opt] "'"

<DoubleStringCharacters> ::
    <DoubleStringCharacter> <DoubleStringCharacters> [opt]

<SingleStringCharacters> ::
    <SingleStringCharacter> <SingleStringCharacters> [opt]

<DoubleStringCharacter> ::
    <SourceCharacter> but not /* double-quote */ "\"" or /* backslash */ "\\" or <LineTerminator>
    "\\" <EscapeSequence>
    <LineContinuation>

<SingleStringCharacter> ::
    <SourceCharacter> but not /* single-quote */ "'" or /* backslash */ "\\" or <LineTerminator>
    "\\" <EscapeSequence>
    <LineContinuation>

<LineContinuation> ::
    "\\" <LineTerminatorSequence>

<EscapeSequence> ::
    <CharacterEscapeSequence>
    "0" [lookahead not in DecimalDigit]
    <HexEscapeSequence>
    <UnicodeEscapeSequence>

<CharacterEscapeSequence> ::
    <SingleEscapeCharacter>
    <NonEscapeCharacter>

<SingleEscapeCharacter> :: one of
    "'" "\"" "\\" "b" "f" "n" "r" "t" "v"

<NonEscapeCharacter> ::
    <SourceCharacter> but not <EscapeCharacter> or <LineTerminator>

<EscapeCharacter> ::
    <SingleEscapeCharacter>
    <DecimalDigit>
    "x"
    "u"

<HexEscapeSequence> ::
    "x" <HexDigit> <HexDigit>

<UnicodeEscapeSequence> ::
    "u" <HexDigit> <HexDigit> <HexDigit> <HexDigit>

<RegularExpressionLiteral> ::
    "/" <RegularExpressionBody> "/" <RegularExpressionFlags>

<RegularExpressionBody> ::
    <RegularExpressionFirstChar> <RegularExpressionChars>

<RegularExpressionChars> ::
    [empty]
    <RegularExpressionChars> <RegularExpressionChar>

<RegularExpressionFirstChar> ::
    <RegularExpressionNonTerminator> but not "*" or "\\" or "/" or "["
    <RegularExpressionBackslashSequence>
    <RegularExpressionClass>

<RegularExpressionChar> ::
    <RegularExpressionNonTerminator> but not "\\" or "/" or "["
    <RegularExpressionBackslashSequence>
    <RegularExpressionClass>

<RegularExpressionBackslashSequence> ::
    "\\" <RegularExpressionNonTerminator>

<RegularExpressionNonTerminator> ::
    <SourceCharacter> but not <LineTerminator>

<RegularExpressionClass> ::
    "[" <RegularExpressionClassChars> "]"

<RegularExpressionClassChars> ::
    [empty]
    <RegularExpressionClassChars> <RegularExpressionClassChar>

<RegularExpressionClassChar> ::
    <RegularExpressionNonTerminator> but not "]" or "\\"
    <RegularExpressionBackslashSequence>

<RegularExpressionFlags> ::
    [empty]
    <RegularExpressionFlags> <IdentifierPart>

<StringNumericLiteral> :::
    <StrWhiteSpace> [opt]
    <StrWhiteSpace> [opt] <StrNumericLiteral> <StrWhiteSpace> [opt]

<StrWhiteSpace> :::
    <StrWhiteSpaceChar> <StrWhiteSpace> [opt]

<StrWhiteSpaceChar> :::
    <WhiteSpace>
    <LineTerminator>

<StrNumericLiteral> :::
    <StrDecimalLiteral>
    <HexIntegerLiteral>

<StrDecimalLiteral> :::
    <StrUnsignedDecimalLiteral>
    "+" <StrUnsignedDecimalLiteral>
    "-" <StrUnsignedDecimalLiteral>

<StrUnsignedDecimalLiteral> :::
    "Infinity"
    <DecimalDigits> "." <DecimalDigits> [opt] <ExponentPart> [opt]
    "." <DecimalDigits> <ExponentPart> [opt]
    <DecimalDigits> <ExponentPart> [opt]

<DecimalDigits> :::
    <DecimalDigit>
    <DecimalDigits> <DecimalDigit>

<DecimalDigit> ::: one of
    "0" "1" "2" "3" "4" "5" "6" "7" "8" "9"

<ExponentPart> :::
    <ExponentIndicator> <SignedInteger>

<ExponentIndicator> ::: one of
    "e" "E"

<SignedInteger> :::
    <DecimalDigits>
    "+" <DecimalDigits>
    "-" <DecimalDigits>

<HexIntegerLiteral> :::
    "0x" <HexDigit>
    "0X" <HexDigit>
    <HexIntegerLiteral> <HexDigit>

<HexDigit> ::: one of
    "0" "1" "2" "3" "4" "5" "6" "7" "8" "9" "a" "b" "c" "d" "e" "f" "A" "B" "C" "D" "E" "F"

<PrimaryExpression> :
    "this"
    <Identifier>
    <Literal>
    <ArrayLiteral>
    <ObjectLiteral>
    "(" <Expression> ")"

<ArrayLiteral> :
    "[" <Elision> [opt] "]"
    "[" <ElementList> "]"
    "[" <ElementList> "," <Elision> [opt] "]"

<ElementList> :
    <Elision> [opt] <AssignmentExpression>
    <ElementList> "," <Elision> [opt] <AssignmentExpression>

<Elision> :
    ","
    <Elision> ","

<ObjectLiteral> :
    "{" "}"
    "{" <PropertyNameAndValueList> "}"
    "{" <PropertyNameAndValueList> "," "}"

<PropertyNameAndValueList> :
    <PropertyAssignment>
    <PropertyNameAndValueList> "," <PropertyAssignment>

<PropertyAssignment> :
    <PropertyName> ":" <AssignmentExpression>
    "get" <PropertyName> "(" ")" "{" <FunctionBody> "}"
    "set" <PropertyName> "(" <PropertySetParameterList> ")" "{" <FunctionBody> "}"

<PropertyName> :
    <IdentifierName>
    <StringLiteral>
    <NumericLiteral>

<PropertySetParameterList> :
    <Identifier>

<MemberExpression> :
    <PrimaryExpression>
    <FunctionExpression>
    <MemberExpression> "[" <Expression> "]"
    <MemberExpression> "." <IdentifierName>
    "new" <MemberExpression> <Arguments>

<NewExpression> :
    <MemberExpression>
    "new" <NewExpression>

<CallExpression> :
    <MemberExpression> <Arguments>
    <CallExpression> <Arguments>
    <CallExpression> "[" <Expression> "]"
    <CallExpression> "." <IdentifierName>

<Arguments> :
    "(" ")"
    "(" <ArgumentList> ")"

<ArgumentList> :
    <AssignmentExpression>
    <ArgumentList> "," <AssignmentExpression>

<LeftHandSideExpression> :
    <NewExpression>
    <CallExpression>

<PostfixExpression> :
    <LeftHandSideExpression>
    <LeftHandSideExpression> [no LineTerminator here] "++"
    <LeftHandSideExpression> [no LineTerminator here] "--"

<UnaryExpression> :
    <PostfixExpression>
    "delete" <UnaryExpression>
    "void" <UnaryExpression>
    "typeof" <UnaryExpression>
    "++" <UnaryExpression>
    "--" <UnaryExpression>
    "+" <UnaryExpression>
    "-" <UnaryExpression>
    "~" <UnaryExpression>
    "!" <UnaryExpression>

<MultiplicativeExpression> :
    <UnaryExpression>
    <MultiplicativeExpression> "*" <UnaryExpression>
    <MultiplicativeExpression> "/" <UnaryExpression>
    <MultiplicativeExpression> "%" <UnaryExpression>

<AdditiveExpression> :
    <MultiplicativeExpression>
    <AdditiveExpression> "+" <MultiplicativeExpression>
    <AdditiveExpression> "-" <MultiplicativeExpression>

<ShiftExpression> :
    <AdditiveExpression>
    <ShiftExpression> "<<" <AdditiveExpression>
    <ShiftExpression> ">>" <AdditiveExpression>
    <ShiftExpression> ">>>" <AdditiveExpression>

<RelationalExpression> :
    <ShiftExpression>
    <RelationalExpression> "<" <ShiftExpression>
    <RelationalExpression> ">" <ShiftExpression>
    <RelationalExpression> "<=" <ShiftExpression>
    <RelationalExpression> ">=" <ShiftExpression>
    <RelationalExpression> "instanceof" <ShiftExpression>
    <RelationalExpression> "in" <ShiftExpression>

<RelationalExpressionNoIn> :
    <ShiftExpression>
    <RelationalExpressionNoIn> "<" <ShiftExpression>
    <RelationalExpressionNoIn> ">" <ShiftExpression>
    <RelationalExpressionNoIn> "<=" <ShiftExpression>
    <RelationalExpressionNoIn> ">=" <ShiftExpression>
    <RelationalExpressionNoIn> "instanceof" <ShiftExpression>

<EqualityExpression> :
    <RelationalExpression>
    <EqualityExpression> "==" <RelationalExpression>
    <EqualityExpression> "!=" <RelationalExpression>
    <EqualityExpression> "===" <RelationalExpression>
    <EqualityExpression> "!==" <RelationalExpression>

<EqualityExpressionNoIn> :
    <RelationalExpressionNoIn>
    <EqualityExpressionNoIn> "==" <RelationalExpressionNoIn>
    <EqualityExpressionNoIn> "!=" <RelationalExpressionNoIn>
    <EqualityExpressionNoIn> "===" <RelationalExpressionNoIn>
    <EqualityExpressionNoIn> "!==" <RelationalExpressionNoIn>

<BitwiseANDExpression> :
    <EqualityExpression>
    <BitwiseANDExpression> "&" <EqualityExpression>

<BitwiseANDExpressionNoIn> :
    <EqualityExpressionNoIn>
    <BitwiseANDExpressionNoIn> "&" <EqualityExpressionNoIn>

<BitwiseXORExpression> :
    <BitwiseANDExpression>
    <BitwiseXORExpression> "^" <BitwiseANDExpression>

<BitwiseXORExpressionNoIn> :
    <BitwiseANDExpressionNoIn>
    <BitwiseXORExpressionNoIn> "^" <BitwiseANDExpressionNoIn>

<BitwiseORExpression> :
    <BitwiseXORExpression>
    <BitwiseORExpression> "|" <BitwiseXORExpression>

<BitwiseORExpressionNoIn> :
    <BitwiseXORExpressionNoIn>
    <BitwiseORExpressionNoIn> "|" <BitwiseXORExpressionNoIn>

<LogicalANDExpression> :
    <BitwiseORExpression>
    <LogicalANDExpression> "&&" <BitwiseORExpression>

<LogicalANDExpressionNoIn> :
    <BitwiseORExpressionNoIn>
    <LogicalANDExpressionNoIn> "&&" <BitwiseORExpressionNoIn>

<LogicalORExpression> :
    <LogicalANDExpression>
    <LogicalORExpression> "||" <LogicalANDExpression>

<LogicalORExpressionNoIn> :
    <LogicalANDExpressionNoIn>
    <LogicalORExpressionNoIn> "||" <LogicalANDExpressionNoIn>

<ConditionalExpression> :
    <LogicalORExpression>
    <LogicalORExpression> "?" <AssignmentExpression> ":" <AssignmentExpression>

<ConditionalExpressionNoIn> :
    <LogicalORExpressionNoIn>
    <LogicalORExpressionNoIn> "?" <AssignmentExpression> ":" <AssignmentExpressionNoIn>

<AssignmentExpression> :
    <ConditionalExpression>
    <LeftHandSideExpression> <AssignmentOperator> <AssignmentExpression>

<AssignmentExpressionNoIn> :
    <ConditionalExpressionNoIn>
    <LeftHandSideExpression> <AssignmentOperator> <AssignmentExpressionNoIn>

<AssignmentOperator> : one of
    "=" "*=" "/=" "%=" "+=" "-=" "<<=" ">>=" ">>>=" "&=" "^=" "|="

<Expression> :
    <AssignmentExpression>
    <Expression> "," <AssignmentExpression>

<ExpressionNoIn> :
    <AssignmentExpressionNoIn>
    <ExpressionNoIn> "," <AssignmentExpressionNoIn>

<Statement> :
    <Block>
    <VariableStatement>
    <EmptyStatement>
    <ExpressionStatement>
    <IfStatement>
    <IterationStatement>
    <ContinueStatement>
    <BreakStatement>
    <ReturnStatement>
    <WithStatement>
    <LabelledStatement>
    <SwitchStatement>
    <ThrowStatement>
    <TryStatement>
    <DebuggerStatement>

<Block> :
    "{" <StatementList> [opt] "}"

<StatementList> :
    <Statement>
    <StatementList> <Statement>

<VariableStatement> :
    "var" <VariableDeclarationList> ";"

<VariableDeclarationList> :
    <VariableDeclaration>
    <VariableDeclarationList> "," <VariableDeclaration>

<VariableDeclarationListNoIn> :
    <VariableDeclarationNoIn>
    <VariableDeclarationListNoIn> "," <VariableDeclarationNoIn>

<VariableDeclaration> :
    <Identifier> <Initialiser> [opt]

<VariableDeclarationNoIn> :
    <Identifier> <InitialiserNoIn> [opt]

<Initialiser> :
    "=" <AssignmentExpression>

<InitialiserNoIn> :
    "=" <AssignmentExpressionNoIn>

<EmptyStatement> :
    ";"

<ExpressionStatement> :
    [lookahead not in {{, function}] <Expression> ";"

<IfStatement> :
    "if" "(" <Expression> ")" <Statement> "else" <Statement>
    "if" "(" <Expression> ")" <Statement>

<IterationStatement> :
    "do" <Statement> "while" "(" <Expression> ")" ";"
    "while" "(" <Expression> ")" <Statement>
    "for" "(" <ExpressionNoIn> [opt] ";" <Expression> [opt] ";" <Expression> [opt] ")" <Statement>
    "for" "(" "var" <VariableDeclarationListNoIn> ";" <Expression> [opt] ";" <Expression> [opt] ")" <Statement>
    "for" "(" <LeftHandSideExpression> "in" <Expression> ")" <Statement>
    "for" "(" "var" <VariableDeclarationNoIn> "in" <Expression> ")" <Statement>

<ContinueStatement> :
    "continue" [no LineTerminator here] <Identifier> [opt] ";"

<BreakStatement> :
    "break" [no LineTerminator here] <Identifier> [opt] ";"

<ReturnStatement> :
    "return" [no LineTerminator here] <Expression> [opt] ";"

<WithStatement> :
    "with" "(" <Expression> ")" <Statement>

<SwitchStatement> :
    "switch" "(" <Expression> ")" <CaseBlock>

<CaseBlock> :
    "{" <CaseClauses> [opt] "}"
    "{" <CaseClauses> [opt] <DefaultClause> <CaseClauses> [opt] "}"

<CaseClauses> :
    <CaseClause>
    <CaseClauses> <CaseClause>

<CaseClause> :
    "case" <Expression> ":" <StatementList> [opt]

<DefaultClause> :
    "default" ":" <StatementList> [opt]

<LabelledStatement> :
    <Identifier> ":" <Statement>

<ThrowStatement> :
    "throw" [no LineTerminator here] <Expression> ";"

<TryStatement> :
    "try" <Block> <Catch>
    "try" <Block> <Finally>
    "try" <Block> <Catch> <Finally>

<Catch> :
    "catch" "(" <Identifier> ")" <Block>

<Finally> :
    "finally" <Block>

<DebuggerStatement> :
    <debugger> ";"

<FunctionDeclaration> :
    "function" <Identifier> "(" <FormalParameterList> [opt] ")" "{" <FunctionBody> "}"

<FunctionExpression> :
    "function" <Identifier> [opt] "(" <FormalParameterList> [opt] ")" "{" <FunctionBody> "}"

<FormalParameterList> :
    <Identifier>
    <FormalParameterList> "," <Identifier>

<FunctionBody> :
    <SourceElements> [opt]

<Program> :
    <SourceElements> [opt]

<SourceElements> :
    <SourceElement>
    <SourceElements> <SourceElement>

<SourceElement> :
    <Statement> <FunctionDeclaration>

<uri> :::
    <uriCharacters> [opt]

<uriCharacters> :::
    <uriCharacter> <uriCharacters> [opt]

<uriCharacter> :::
    <uriReserved>
    <uriUnescaped>
    <uriEscaped>

<uriReserved> ::: one of
    ";" "/" "?" ":" "@" "&" "=" "+" "$" ","

<uriUnescaped> :::
    <uriAlpha>
    <DecimalDigit>
    <uriMark>

<uriEscaped> :::
    "%" <HexDigit> <HexDigit>

<uriAlpha> ::: one of
    "a" "b" "c" "d" "e" "f" "g" "h" "i" "j" "k" "l" "m" "n" "o" "p" "q" "r" "s" "t" "u" "v" "w" "x" "y" "z"
    "A" "B" "C" "D" "E" "F" "G" "H" "I" "J" "K" "L" "M" "N" "O" "P" "Q" "R" "S" "T" "U" "V" "W" "X" "Y" "Z"

<uriMark> ::: one of
    "-" "_" "." "!" "~" "*" "'" "(" ")"

<Pattern> ::
    <Disjunction>

<Disjunction> ::
    <Alternative>
    <Alternative> "|" <Disjunction>

<Alternative> ::
    [empty]
    <Alternative> <Term>

<Term> ::
    <Assertion>
    <Atom>
    <Atom> <Quantifier>

<Assertion> ::
    "^"
    "$"
    "\\" "b"
    "\\" "B"
    "(" "?" "=" <Disjunction> ")"
    "(" "?" "!" <Disjunction> ")"

<Quantifier> ::
    <QuantifierPrefix>
    <QuantifierPrefix> "?"

<QuantifierPrefix> ::
    "*"
    "+"
    "?"
    "{" <DecimalDigits> "}"
    "{" <DecimalDigits> "," "}"
    "{" <DecimalDigits> "," <DecimalDigits> "}"

<Atom> ::
    <PatternCharacter>
    "."
    "\\" <AtomEscape>
    <CharacterClass>
    "(" <Disjunction> ")"
    "(" "?" ":" <Disjunction> ")"

<PatternCharacter> :: <SourceCharacter> but not any of:
    "^" "$" "\\" "." "*" "+" "?" "(" ")" "[" "]" "{" "}" "|"

<AtomEscape> ::
    <DecimalEscape>
    <CharacterEscape>
    <CharacterClassEscape>

<CharacterEscape> ::
    <ControlEscape>
    "c" <ControlLetter>
    <HexEscapeSequence>
    <UnicodeEscapeSequence>
    <IdentityEscape>

<ControlEscape> :: one of
    "f" "n" "r" "t" "v"

<ControlLetter> :: one of
    "a" "b" "c" "d" "e" "f" "g" "h" "i" "j" "k" "l" "m" "n" "o" "p" "q" "r" "s" "t" "u" "v" "w" "x" "y" "z"
    "A" "B" "C" "D" "E" "F" "G" "H" "I" "J" "K" "L" "M" "N" "O" "P" "Q" "R" "S" "T" "U" "V" "W" "X" "Y" "Z"

<IdentityEscape> ::
    <SourceCharacter> but not <IdentifierPart>
    <ZWJ>
    <ZWNJ>

<DecimalEscape> ::
    <DecimalIntegerLiteral> [lookahead not in DecimalDigit]

<CharacterClassEscape> :: one of
    "d" "D" "s" "S" "w" "W"

<CharacterClass> ::
    "[" [lookahead not in {^}] <ClassRanges> "]"
    "[" "^" <ClassRanges> "]"

<ClassRanges> ::
    [empty]
    <NonemptyClassRanges>

<NonemptyClassRanges> ::
    <ClassAtom>
    <ClassAtom> <NonemptyClassRangesNoDash>
    <ClassAtom> "-" <ClassAtom> <ClassRanges>

<NonemptyClassRangesNoDash> ::
    <ClassAtom>
    <ClassAtomNoDash> <NonemptyClassRangesNoDash>
    <ClassAtomNoDash> "-" <ClassAtom> <ClassRanges>

<ClassAtom> ::
    "-"
    <ClassAtomNoDash>

<ClassAtomNoDash> ::
    <SourceCharacter> but not one of "\\" or "]" or "-"
    "\\" <ClassEscape>

<ClassEscape> ::
    <DecimalEscape>
    "b"
    <CharacterEscape>
    <CharacterClassEscape>

<JSONWhiteSpace> ::
    <TAB>
    <CR>
    <LF>
    <SP>

<JSONString> ::
    "\"" <JSONStringCharacters> [opt] "\""

<JSONStringCharacters> ::
    <JSONStringCharacter> <JSONStringCharacters> [opt]

<JSONStringCharacter> ::
    <SourceCharacter> but not /* double-quote */ "\"" or /* backslash */ "\\" or /* U+0000 thru U+001F */
    "\\" <JSONEscapeSequence>

<JSONEscapeSequence> ::
    <JSONEscapeCharacter>
    <UnicodeEscapeSequence>

<JSONEscapeCharacter> :: one of
    "\"" "/" "\\" "b" "f" "n" "r" "t"

<JSONNumber> ::
    "-" [opt] <DecimalIntegerLiteral> <JSONFraction> [opt] <ExponentPart> [opt]

<JSONFraction> ::
    "." <DecimalDigits>

<JSONNullLiteral> ::
    <NullLiteral>

<JSONBooleanLiteral> ::
    <BooleanLiteral>

<JSONText> :
    <JSONValue>

<JSONValue> :
    <JSONNullLiteral>
    <JSONBooleanLiteral>
    <JSONObject>
    <JSONArray>
    <JSONString>
    <JSONNumber>

<JSONObject> :
    "{" "}"
    "{" <JSONMemberList> "}"

<JSONMember> :
    <JSONString> ":" <JSONValue>

<JSONMemberList> :
    <JSONMember>
    <JSONMemberList> "," <JSONMember>

<JSONArray> :
    "[" "]"
    "[" <JSONElementList> "]"

<JSONElementList> :
    <JSONValue>
    <JSONElementList> "," <JSONValue>

/* <a href="#sec-6">See clause 6</a> */
<SourceCharacter> ::
    <any Unicode code unit>

/* <a href="#sec-7">See clause 7</a> */
<InputElementDiv> ::
    <WhiteSpace>
    <LineTerminator>
    <Comment>
    <Token>
    <DivPunctuator>

/* <a href="#sec-7">See clause 7</a> */
<InputElementRegExp> ::
    <WhiteSpace>
    <LineTerminator>
    <Comment>
    <Token>
    <RegularExpressionLiteral>

/* <a href="#sec-7.2">See 7.2</a> */
<WhiteSpace> ::
    <TAB>
    <VT>
    <FF>
    <SP>
    <NBSP>
    <BOM>
    <USP>

/* <a href="#sec-7.3">See 7.3</a> */
<LineTerminator> ::
    <LF>
    <CR>
    <LS>
    <PS>

/* <a href="#sec-7.3">See 7.3</a> */
<LineTerminatorSequence> ::
    <LF>
    <CR> [lookahead not in <LF>]
    <LS>
    <PS>
    <CR> <LF>

/* <a href="#sec-7.4">See 7.4</a> */
<Comment> ::
    <MultiLineComment>
    <SingleLineComment>

/* <a href="#sec-7.4">See 7.4</a> */
<MultiLineComment> ::
    "/*" <MultiLineCommentChars> [opt] "*/"

/* <a href="#sec-7.4">See 7.4</a> */
<MultiLineCommentChars> ::
    <MultiLineNotAsteriskChar> <MultiLineCommentChars> [opt]
    "*" <PostAsteriskCommentChars> [opt]

/* <a href="#sec-7.4">See 7.4</a> */
<PostAsteriskCommentChars> ::
    <MultiLineNotForwardSlashOrAsteriskChar> <MultiLineCommentChars> [opt]
    "*" <PostAsteriskCommentChars> [opt]

/* <a href="#sec-7.4">See 7.4</a> */
<MultiLineNotAsteriskChar> ::
    <SourceCharacter> but not /* asterisk */ "*"

/* <a href="#sec-7.4">See 7.4</a> */
<MultiLineNotForwardSlashOrAsteriskChar> ::
    <SourceCharacter> but not /* forward-slash */ "/" or /* asterisk */ "*"

/* <a href="#sec-7.4">See 7.4</a> */
<SingleLineComment> ::
    "//" <SingleLineCommentChars> [opt]

/* <a href="#sec-7.4">See 7.4</a> */
<SingleLineCommentChars> ::
    <SingleLineCommentChar> <SingleLineCommentChars> [opt]

/* <a href="#sec-7.4">See 7.4</a> */
<SingleLineCommentChar> ::
    <SourceCharacter> but not <LineTerminator>

/* <a href="#sec-7.5">See 7.5</a> */
<Token> ::
    <IdentifierName>
    <Punctuator>
    <NumericLiteral>
    <StringLiteral>

/* <a href="#sec-7.6">See 7.6</a> */
<Identifier> ::
    <IdentifierName> but not <ReservedWord>

/* <a href="#sec-7.6">See 7.6</a> */
<IdentifierName> ::
    <IdentifierStart>
    <IdentifierName> <IdentifierPart>

/* <a href="#sec-7.6">See 7.6</a> */
<IdentifierStart> ::
    <UnicodeLetter>
    "$"
    "_"
    "\\" <UnicodeEscapeSequence>

/* <a href="#sec-7.6">See 7.6</a> */
<IdentifierPart> ::
    <IdentifierStart>
    <UnicodeCombiningMark>
    <UnicodeDigit>
    <UnicodeConnectorPunctuation>
    <ZWNJ>
    <ZWJ>

/* <a href="#sec-7.6">See 7.6</a> */
<UnicodeLetter> ::
    <any character in the Unicode categories "Uppercase letter (Lu)", "Lowercase letter (Ll)", "Titlecase letter (Lt)", "Modifier letter (Lm)", "Other letter (Lo)", or "Letter number (Nl)".>

/* <a href="#sec-7.6">See 7.6</a> */
<UnicodeCombiningMark> ::
    <any character in the Unicode categories "Non-spacing mark (Mn)" or "Combining spacing mark (Mc)">

/* <a href="#sec-7.6">See 7.6</a> */
<UnicodeDigit> ::
    <any character in the Unicode category "Decimal number (Nd)">

/* <a href="#sec-7.6">See 7.6</a> */
<UnicodeConnectorPunctuation> ::
    <any character in the Unicode category "Connector punctuation (Pc)">

/* <a href="#sec-7.6.1">See 7.6.1</a> */
<ReservedWord> ::
    <Keyword>
    <FutureReservedWord>
    <NullLiteral>
    <BooleanLiteral>

/* <a href="#sec-7.6.1.1">See 7.6.1.1</a> */
<Keyword> :: one of
    "break" "do" "instanceof" "typeof" "case" "else" "new" "var" "catch" "finally" "return" "void" "continue" "for" "switch" "while" "debugger" "function" "this" "with" "default" "if" "throw" "Â " "delete" "in" "try"

/* <a href="#sec-7.6.1.2">See 7.6.1.2</a> */
<FutureReservedWord> :: one of
    "class" "enum" "extends" "super" "const" "export" "import"
    <or in strict mode code> one of
    "implements" "let" "private" "public" "interface" "package" "protected" "static" "yield"

/* <a href="#sec-7.7">See 7.7</a> */
<Punctuator> :: one of
    "{" "}" "(" ")" "[" "]" "." ";" "," "<" ">" "<=" ">=" "==" "!=" "===" "!==" "+" "-" "*" "%" "++" "--" "<<" ">>" ">>>" "&" "|" "^" "!" "~" "&&" "||" "?" ":" "=" "+=" "-=" "*=" "%=" "<<=" ">>=" ">>>=" "&=" "|=" "^="

/* <a href="#sec-7.7">See 7.7</a> */
<DivPunctuator> :: one of
    "/" "/="

/* <a href="#sec-7.8">See 7.8</a> */
<Literal> ::
    <NullLiteral>
    <BooleanLiteral>
    <NumericLiteral>
    <StringLiteral>
    <RegularExpressionLiteral>

/* <a href="#sec-7.8.1">See 7.8.1</a> */
<NullLiteral> ::
    "null"

/* <a href="#sec-7.8.2">See 7.8.2</a> */
<BooleanLiteral> ::
    "true"
    "false"

/* <a href="#sec-7.8.3">See 7.8.3</a> */
<NumericLiteral> ::
    <DecimalLiteral>
    <HexIntegerLiteral>

/* <a href="#sec-7.8.3">See 7.8.3</a> */
<DecimalLiteral> ::
    <DecimalIntegerLiteral> "." <DecimalDigits> [opt] <ExponentPart> [opt]
    "." <DecimalDigits> <ExponentPart> [opt]
    <DecimalIntegerLiteral> <ExponentPart> [opt]

/* <a href="#sec-7.8.3">See 7.8.3</a> */
<DecimalIntegerLiteral> ::
    "0"
    <NonZeroDigit> <DecimalDigits> [opt]

/* <a href="#sec-7.8.3">See 7.8.3</a> */
<DecimalDigits> ::
    <DecimalDigit>
    <DecimalDigits> <DecimalDigit>

/* <a href="#sec-7.8.3">See 7.8.3</a> */
<DecimalDigit> :: one of
    "0" "1" "2" "3" "4" "5" "6" "7" "8" "9"

/* <a href="#sec-7.8.3">See 7.8.3</a> */
<NonZeroDigit> :: one of
    "1" "2" "3" "4" "5" "6" "7" "8" "9"

/* <a href="#sec-7.8.3">See 7.8.3</a> */
<ExponentPart> ::
    <ExponentIndicator> <SignedInteger>

/* <a href="#sec-7.8.3">See 7.8.3</a> */
<ExponentIndicator> :: one of
    "e" "E"

/* <a href="#sec-7.8.3">See 7.8.3</a> */
<SignedInteger> ::
    <DecimalDigits>
    "+" <DecimalDigits>
    "-" <DecimalDigits>

/* <a href="#sec-7.8.3">See 7.8.3</a> */
<HexIntegerLiteral> ::
    "0x" <HexDigit>
    "0X" <HexDigit>
    <HexIntegerLiteral> <HexDigit>

/* <a href="#sec-7.8.3">See 7.8.3</a> */
<HexDigit> :: one of
    "0" "1" "2" "3" "4" "5" "6" "7" "8" "9" "a" "b" "c" "d" "e" "f" "A" "B" "C" "D" "E" "F"

/* <a href="#sec-7.8.4">See 7.8.4</a> */
<StringLiteral> ::
    "\"" <DoubleStringCharacters> [opt] "\""
    "'" <SingleStringCharacters> [opt] "'"

/* <a href="#sec-7.8.4">See 7.8.4</a> */
<DoubleStringCharacters> ::
    <DoubleStringCharacter> <DoubleStringCharacters> [opt]

/* <a href="#sec-7.8.4">See 7.8.4</a> */
<SingleStringCharacters> ::
    <SingleStringCharacter> <SingleStringCharacters> [opt]

/* <a href="#sec-7.8.4">See 7.8.4</a> */
<DoubleStringCharacter> ::
    <SourceCharacter> but not /* double-quote */ "\"" or /* backslash */ "\\" or <LineTerminator>
    "\\" <EscapeSequence>
    <LineContinuation>

/* <a href="#sec-7.8.4">See 7.8.4</a> */
<SingleStringCharacter> ::
    <SourceCharacter> but not /* single-quote */ "'" or /* backslash */ "\\" or <LineTerminator>
    "\\" <EscapeSequence>
    <LineContinuation>

/* <a href="#sec-7.8.4">See 7.8.4</a> */
<LineContinuation> ::
    "\\" <LineTerminatorSequence>

/* <a href="#sec-7.8.4">See 7.8.4</a> */
<EscapeSequence> ::
    <CharacterEscapeSequence>
    "0" [lookahead not in DecimalDigit]
    <HexEscapeSequence>
    <UnicodeEscapeSequence>

/* <a href="#sec-7.8.4">See 7.8.4</a> */
<CharacterEscapeSequence> ::
    <SingleEscapeCharacter>
    <NonEscapeCharacter>

/* <a href="#sec-7.8.4">See 7.8.4</a> */
<SingleEscapeCharacter> :: one of
    "'" "\"" "\\" "b" "f" "n" "r" "t" "v"

/* <a href="#sec-7.8.4">See 7.8.4</a> */
<NonEscapeCharacter> ::
    <SourceCharacter> but not <EscapeCharacter> or <LineTerminator>

/* <a href="#sec-7.8.4">See 7.8.4</a> */
<EscapeCharacter> ::
    <SingleEscapeCharacter>
    <DecimalDigit>
    "x"
    "u"

/* <a href="#sec-7.8.4">See 7.8.4</a> */
<HexEscapeSequence> ::
    "x" <HexDigit> <HexDigit>

/* <a href="#sec-7.8.4">See 7.8.4</a> */
<UnicodeEscapeSequence> ::
    "u" <HexDigit> <HexDigit> <HexDigit> <HexDigit>

/* <a href="#sec-7.8.5">See 7.8.5</a> */
<RegularExpressionLiteral> ::
    "/" <RegularExpressionBody> "/" <RegularExpressionFlags>

/* <a href="#sec-7.8.5">See 7.8.5</a> */
<RegularExpressionBody> ::
    <RegularExpressionFirstChar> <RegularExpressionChars>

/* <a href="#sec-7.8.5">See 7.8.5</a> */
<RegularExpressionChars> ::
    [empty]
    <RegularExpressionChars> <RegularExpressionChar>

/* <a href="#sec-7.8.5">See 7.8.5</a> */
<RegularExpressionFirstChar> ::
    <RegularExpressionNonTerminator> but not "*" or "\\" or "/" or "["
    <RegularExpressionBackslashSequence>
    <RegularExpressionClass>

/* <a href="#sec-7.8.5">See 7.8.5</a> */
<RegularExpressionChar> ::
    <RegularExpressionNonTerminator> but not "\\" or "/" or "["
    <RegularExpressionBackslashSequence>
    <RegularExpressionClass>

/* <a href="#sec-7.8.5">See 7.8.5</a> */
<RegularExpressionBackslashSequence> ::
    "\\" <RegularExpressionNonTerminator>

/* <a href="#sec-7.8.5">See 7.8.5</a> */
<RegularExpressionNonTerminator> ::
    <SourceCharacter> but not <LineTerminator>

/* <a href="#sec-7.8.5">See 7.8.5</a> */
<RegularExpressionClass> ::
    "[" <RegularExpressionClassChars> "]"

/* <a href="#sec-7.8.5">See 7.8.5</a> */
<RegularExpressionClassChars> ::
    [empty]
    <RegularExpressionClassChars> <RegularExpressionClassChar>

/* <a href="#sec-7.8.5">See 7.8.5</a> */
<RegularExpressionClassChar> ::
    <RegularExpressionNonTerminator> but not "]" or "\\"
    <RegularExpressionBackslashSequence>

/* <a href="#sec-7.8.5">See 7.8.5</a> */
<RegularExpressionFlags> ::
    [empty]
    <RegularExpressionFlags> <IdentifierPart>

/* <a href="#sec-9.3.1">See 9.3.1</a> */
<StringNumericLiteral> :::
    <StrWhiteSpace> [opt]
    <StrWhiteSpace> [opt] <StrNumericLiteral> <StrWhiteSpace> [opt]

/* <a href="#sec-9.3.1">See 9.3.1</a> */
<StrWhiteSpace> :::
    <StrWhiteSpaceChar> <StrWhiteSpace> [opt]

/* <a href="#sec-9.3.1">See 9.3.1</a> */
<StrWhiteSpaceChar> :::
    <WhiteSpace>
    <LineTerminator>

/* <a href="#sec-9.3.1">See 9.3.1</a> */
<StrNumericLiteral> :::
    <StrDecimalLiteral>
    <HexIntegerLiteral>

/* <a href="#sec-9.3.1">See 9.3.1</a> */
<StrDecimalLiteral> :::
    <StrUnsignedDecimalLiteral>
    "+" <StrUnsignedDecimalLiteral>
    "-" <StrUnsignedDecimalLiteral>

/* <a href="#sec-9.3.1">See 9.3.1</a> */
<StrUnsignedDecimalLiteral> :::
    "Infinity"
    <DecimalDigits> "." <DecimalDigits> [opt] <ExponentPart> [opt]
    "." <DecimalDigits> <ExponentPart> [opt]
    <DecimalDigits> <ExponentPart> [opt]

/* <a href="#sec-9.3.1">See 9.3.1</a> */
<DecimalDigits> :::
    <DecimalDigit>
    <DecimalDigits> <DecimalDigit>

/* <a href="#sec-9.3.1">See 9.3.1</a> */
<DecimalDigit> ::: one of
    "0" "1" "2" "3" "4" "5" "6" "7" "8" "9"

/* <a href="#sec-9.3.1">See 9.3.1</a> */
<ExponentPart> :::
    <ExponentIndicator> <SignedInteger>

/* <a href="#sec-9.3.1">See 9.3.1</a> */
<ExponentIndicator> ::: one of
    "e" "E"

/* <a href="#sec-9.3.1">See 9.3.1</a> */
<SignedInteger> :::
    <DecimalDigits>
    "+" <DecimalDigits>
    "-" <DecimalDigits>

/* <a href="#sec-9.3.1">See 9.3.1</a> */
<HexIntegerLiteral> :::
    "0x" <HexDigit>
    "0X" <HexDigit>
    <HexIntegerLiteral> <HexDigit>

/* <a href="#sec-9.3.1">See 9.3.1</a> */
<HexDigit> ::: one of
    "0" "1" "2" "3" "4" "5" "6" "7" "8" "9" "a" "b" "c" "d" "e" "f" "A" "B" "C" "D" "E" "F"

/* <a href="#sec-11.1">See 11.1</a> */
<PrimaryExpression> :
    "this"
    <Identifier>
    <Literal>
    <ArrayLiteral>
    <ObjectLiteral>
    "(" <Expression> ")"

/* <a href="#sec-11.1.4">See 11.1.4</a> */
<ArrayLiteral> :
    "[" <Elision> [opt] "]"
    "[" <ElementList> "]"
    "[" <ElementList> "," <Elision> [opt] "]"

/* <a href="#sec-11.1.4">See 11.1.4</a> */
<ElementList> :
    <Elision> [opt] <AssignmentExpression>
    <ElementList> "," <Elision> [opt] <AssignmentExpression>

/* <a href="#sec-11.1.4">See 11.1.4</a> */
<Elision> :
    ","
    <Elision> ","

/* <a href="#sec-11.1.5">See 11.1.5</a> */
<ObjectLiteral> :
    "{" "}"
    "{" <PropertyNameAndValueList> "}"
    "{" <PropertyNameAndValueList> "," "}"

/* <a href="#sec-11.1.5">See 11.1.5</a> */
<PropertyNameAndValueList> :
    <PropertyAssignment>
    <PropertyNameAndValueList> "," <PropertyAssignment>

/* <a href="#sec-11.1.5">See 11.1.5</a> */
<PropertyAssignment> :
    <PropertyName> ":" <AssignmentExpression>
    "get" <PropertyName> "(" ")" "{" <FunctionBody> "}"
    "set" <PropertyName> "(" <PropertySetParameterList> ")" "{" <FunctionBody> "}"

/* <a href="#sec-11.1.5">See 11.1.5</a> */
<PropertyName> :
    <IdentifierName>
    <StringLiteral>
    <NumericLiteral>

/* <a href="#sec-11.1.5">See 11.1.5</a> */
<PropertySetParameterList> :
    <Identifier>

/* <a href="#sec-11.2">See 11.2</a> */
<MemberExpression> :
    <PrimaryExpression>
    <FunctionExpression>
    <MemberExpression> "[" <Expression> "]"
    <MemberExpression> "." <IdentifierName>
    "new" <MemberExpression> <Arguments>

/* <a href="#sec-11.2">See 11.2</a> */
<NewExpression> :
    <MemberExpression>
    "new" <NewExpression>

/* <a href="#sec-11.2">See 11.2</a> */
<CallExpression> :
    <MemberExpression> <Arguments>
    <CallExpression> <Arguments>
    <CallExpression> "[" <Expression> "]"
    <CallExpression> "." <IdentifierName>

/* <a href="#sec-11.2">See 11.2</a> */
<Arguments> :
    "(" ")"
    "(" <ArgumentList> ")"

/* <a href="#sec-11.2">See 11.2</a> */
<ArgumentList> :
    <AssignmentExpression>
    <ArgumentList> "," <AssignmentExpression>

/* <a href="#sec-11.2">See 11.2</a> */
<LeftHandSideExpression> :
    <NewExpression>
    <CallExpression>

/* <a href="#sec-11.3">See 11.3</a> */
<PostfixExpression> :
    <LeftHandSideExpression>
    <LeftHandSideExpression> [no LineTerminator here] "++"
    <LeftHandSideExpression> [no LineTerminator here] "--"

/* <a href="#sec-11.4">See 11.4</a> */
<UnaryExpression> :
    <PostfixExpression>
    "delete" <UnaryExpression>
    "void" <UnaryExpression>
    "typeof" <UnaryExpression>
    "++" <UnaryExpression>
    "--" <UnaryExpression>
    "+" <UnaryExpression>
    "-" <UnaryExpression>
    "~" <UnaryExpression>
    "!" <UnaryExpression>

/* <a href="#sec-11.5">See 11.5</a> */
<MultiplicativeExpression> :
    <UnaryExpression>
    <MultiplicativeExpression> "*" <UnaryExpression>
    <MultiplicativeExpression> "/" <UnaryExpression>
    <MultiplicativeExpression> "%" <UnaryExpression>

/* <a href="#sec-11.6">See 11.6</a> */
<AdditiveExpression> :
    <MultiplicativeExpression>
    <AdditiveExpression> "+" <MultiplicativeExpression>
    <AdditiveExpression> "-" <MultiplicativeExpression>

/* <a href="#sec-11.7">See 11.7</a> */
<ShiftExpression> :
    <AdditiveExpression>
    <ShiftExpression> "<<" <AdditiveExpression>
    <ShiftExpression> ">>" <AdditiveExpression>
    <ShiftExpression> ">>>" <AdditiveExpression>

/* <a href="#sec-11.8">See 11.8</a> */
<RelationalExpression> :
    <ShiftExpression>
    <RelationalExpression> "<" <ShiftExpression>
    <RelationalExpression> ">" <ShiftExpression>
    <RelationalExpression> "<=" <ShiftExpression>
    <RelationalExpression> ">=" <ShiftExpression>
    <RelationalExpression> "instanceof" <ShiftExpression>
    <RelationalExpression> "in" <ShiftExpression>

/* <a href="#sec-11.8">See 11.8</a> */
<RelationalExpressionNoIn> :
    <ShiftExpression>
    <RelationalExpressionNoIn> "<" <ShiftExpression>
    <RelationalExpressionNoIn> ">" <ShiftExpression>
    <RelationalExpressionNoIn> "<=" <ShiftExpression>
    <RelationalExpressionNoIn> ">=" <ShiftExpression>
    <RelationalExpressionNoIn> "instanceof" <ShiftExpression>

/* <a href="#sec-11.9">See 11.9</a> */
<EqualityExpression> :
    <RelationalExpression>
    <EqualityExpression> "==" <RelationalExpression>
    <EqualityExpression> "!=" <RelationalExpression>
    <EqualityExpression> "===" <RelationalExpression>
    <EqualityExpression> "!==" <RelationalExpression>

/* <a href="#sec-11.9">See 11.9</a> */
<EqualityExpressionNoIn> :
    <RelationalExpressionNoIn>
    <EqualityExpressionNoIn> "==" <RelationalExpressionNoIn>
    <EqualityExpressionNoIn> "!=" <RelationalExpressionNoIn>
    <EqualityExpressionNoIn> "===" <RelationalExpressionNoIn>
    <EqualityExpressionNoIn> "!==" <RelationalExpressionNoIn>

/* <a href="#sec-11.10">See 11.10</a> */
<BitwiseANDExpression> :
    <EqualityExpression>
    <BitwiseANDExpression> "&" <EqualityExpression>

/* <a href="#sec-11.10">See 11.10</a> */
<BitwiseANDExpressionNoIn> :
    <EqualityExpressionNoIn>
    <BitwiseANDExpressionNoIn> "&" <EqualityExpressionNoIn>

/* <a href="#sec-11.10">See 11.10</a> */
<BitwiseXORExpression> :
    <BitwiseANDExpression>
    <BitwiseXORExpression> "^" <BitwiseANDExpression>

/* <a href="#sec-11.10">See 11.10</a> */
<BitwiseXORExpressionNoIn> :
    <BitwiseANDExpressionNoIn>
    <BitwiseXORExpressionNoIn> "^" <BitwiseANDExpressionNoIn>

/* <a href="#sec-11.10">See 11.10</a> */
<BitwiseORExpression> :
    <BitwiseXORExpression>
    <BitwiseORExpression> "|" <BitwiseXORExpression>

/* <a href="#sec-11.10">See 11.10</a> */
<BitwiseORExpressionNoIn> :
    <BitwiseXORExpressionNoIn>
    <BitwiseORExpressionNoIn> "|" <BitwiseXORExpressionNoIn>

/* <a href="#sec-11.11">See 11.11</a> */
<LogicalANDExpression> :
    <BitwiseORExpression>
    <LogicalANDExpression> "&&" <BitwiseORExpression>

/* <a href="#sec-11.11">See 11.11</a> */
<LogicalANDExpressionNoIn> :
    <BitwiseORExpressionNoIn>
    <LogicalANDExpressionNoIn> "&&" <BitwiseORExpressionNoIn>

/* <a href="#sec-11.11">See 11.11</a> */
<LogicalORExpression> :
    <LogicalANDExpression>
    <LogicalORExpression> "||" <LogicalANDExpression>

/* <a href="#sec-11.11">See 11.11</a> */
<LogicalORExpressionNoIn> :
    <LogicalANDExpressionNoIn>
    <LogicalORExpressionNoIn> "||" <LogicalANDExpressionNoIn>

/* <a href="#sec-11.12">See 11.12</a> */
<ConditionalExpression> :
    <LogicalORExpression>
    <LogicalORExpression> "?" <AssignmentExpression> ":" <AssignmentExpression>

/* <a href="#sec-11.12">See 11.12</a> */
<ConditionalExpressionNoIn> :
    <LogicalORExpressionNoIn>
    <LogicalORExpressionNoIn> "?" <AssignmentExpressionNoIn> ":" <AssignmentExpressionNoIn>

/* <a href="#sec-11.13">See 11.13</a> */
<AssignmentExpression> :
    <ConditionalExpression>
    <LeftHandSideExpression> <AssignmentOperator> <AssignmentExpression>

/* <a href="#sec-11.13">See 11.13</a> */
<AssignmentExpressionNoIn> :
    <ConditionalExpressionNoIn>
    <LeftHandSideExpression> <AssignmentOperator> <AssignmentExpressionNoIn>

/* <a href="#sec-11.13">See 11.13</a> */
<AssignmentOperator> : one of
    "=" "*=" "/=" "%=" "+=" "-=" "<<=" ">>=" ">>>=" "&=" "^=" "|="

/* <a href="#sec-11.14">See 11.14</a> */
<Expression> :
    <AssignmentExpression>
    <Expression> "," <AssignmentExpression>

/* <a href="#sec-11.14">See 11.14</a> */
<ExpressionNoIn> :
    <AssignmentExpressionNoIn>
    <ExpressionNoIn> "," <AssignmentExpressionNoIn>

/* <a href="#sec-12">See clause 12</a> */
<Statement> :
    <Block>
    <VariableStatement>
    <EmptyStatement>
    <ExpressionStatement>
    <IfStatement>
    <IterationStatement>
    <ContinueStatement>
    <BreakStatement>
    <ReturnStatement>
    <WithStatement>
    <LabelledStatement>
    <SwitchStatement>
    <ThrowStatement>
    <TryStatement>
    <DebuggerStatement>
/* <a href="#sec-12.1">See 12.1</a> */
<Block> :
    "{" <StatementList> [opt] "}"

/* <a href="#sec-12.1">See 12.1</a> */
<StatementList> :
    <Statement>
    <StatementList> <Statement>

/* <a href="#sec-12.2">See 12.2</a> */
<VariableStatement> :
    "var" <VariableDeclarationList> ";"

/* <a href="#sec-12.2">See 12.2</a> */
<VariableDeclarationList> :
    <VariableDeclaration>
    <VariableDeclarationList> "," <VariableDeclaration>

/* <a href="#sec-12.2">See 12.2</a> */
<VariableDeclarationListNoIn> :
    <VariableDeclarationNoIn>
    <VariableDeclarationListNoIn> "," <VariableDeclarationNoIn>

/* <a href="#sec-12.2">See 12.2</a> */
<VariableDeclaration> :
    <Identifier> <Initialiser> [opt]

/* <a href="#sec-12.2">See 12.2</a> */
<VariableDeclarationNoIn> :
    <Identifier> <InitialiserNoIn> [opt]

/* <a href="#sec-12.2">See 12.2</a> */
<Initialiser> :
    "=" <AssignmentExpression>

/* <a href="#sec-12.2">See 12.2</a> */
<InitialiserNoIn> :
    "=" <AssignmentExpressionNoIn>

/* <a href="#sec-12.3">See 12.3</a> */
<EmptyStatement> :
    ";"

/* <a href="#sec-12.4">See 12.4</a> */
<ExpressionStatement> :
    [lookahead not in {{, function}] <Expression> ";"

/* <a href="#sec-12.5">See 12.5</a> */
<IfStatement> :
    "if" "(" <Expression> ")" <Statement> "else" <Statement>
    "if" "(" <Expression> ")" <Statement>

/* <a href="#sec-12.6">See 12.6</a> */
<IterationStatement> :
    "do" <Statement> "while" "(" <Expression> ");"
    "while" "(" <Expression> ")" <Statement>
    "for" "(" <ExpressionNoIn> [opt] ";" <Expression> [opt] ";" <Expression> [opt] ")" <Statement>
    "for" "(" "var" <VariableDeclarationListNoIn> ";" <Expression> [opt] ";" <Expression> [opt] ")" <Statement>
    "for" "(" <LeftHandSideExpression> "in" <Expression> ")" <Statement>
    "for" "(" "var" <VariableDeclarationNoIn> "in" <Expression> ")" <Statement>

/* <a href="#sec-12.7">See 12.7</a> */
<ContinueStatement> :
    "continue" [no LineTerminator here] <Identifier> [opt] ";"

/* <a href="#sec-12.8">See 12.8</a> */
<BreakStatement> :
    "break" [no LineTerminator here] <Identifier> [opt] ";"

/* <a href="#sec-12.9">See 12.9</a> */
<ReturnStatement> :
    "return" [no LineTerminator here] <Expression> [opt] ";"

/* <a href="#sec-12.10">See 12.10</a> */
<WithStatement> :
    "with" "(" <Expression> ")" <Statement>

/* <a href="#sec-12.11">See 12.11</a> */
<SwitchStatement> :
    "switch" "(" <Expression> ")" <CaseBlock>

/* <a href="#sec-12.11">See 12.11</a> */
<CaseBlock> :
    "{" <CaseClauses> [opt] "}"
    "{" <CaseClauses> [opt] <DefaultClause> <CaseClauses> [opt] "}"

/* <a href="#sec-12.11">See 12.11</a> */
<CaseClauses> :
    <CaseClause>
    <CaseClauses> <CaseClause>

/* <a href="#sec-12.11">See 12.11</a> */
<CaseClause> :
    "case" <Expression> ":" <StatementList> [opt]

/* <a href="#sec-12.11">See 12.11</a> */
<DefaultClause> :
    "default" ":" <StatementList> [opt]

/* <a href="#sec-12.12">See 12.12</a> */
<LabelledStatement> :
    <Identifier> ":" <Statement>

/* <a href="#sec-12.13">See 12.13</a> */
<ThrowStatement> :
    "throw" [no LineTerminator here] <Expression> ";"

/* <a href="#sec-12.14">See 12.14</a> */
<TryStatement> :
    "try" <Block> <Catch>
    "try" <Block> <Finally>
    "try" <Block> <Catch> <Finally>

/* <a href="#sec-12.14">See 12.14</a> */
<Catch> :
    "catch" "(" <Identifier> ")" <Block>

/* <a href="#sec-12.14">See 12.14</a> */
<Finally> :
    "finally" <Block>

/* <a href="#sec-12.15">See 12.15</a> */
<DebuggerStatement> :
    "debugger" ";"

/* <a href="#sec-13">See clause 13</a> */
<FunctionDeclaration> :
    "function" <Identifier> "(" <FormalParameterList> [opt] ")" "{" <FunctionBody> "}"

/* <a href="#sec-13">See clause 13</a> */
<FunctionExpression> :
    "function" <Identifier> [opt] "(" <FormalParameterList> [opt] ")" "{" <FunctionBody> "}"

/* <a href="#sec-13">See clause 13</a> */
<FormalParameterList> :
    <Identifier>
    <FormalParameterList> "," <Identifier>

/* <a href="#sec-13">See clause 13</a> */
<FunctionBody> :
    <SourceElements> [opt]

/* <a href="#sec-14">See clause 14</a> */
<Program> :
    <SourceElements> [opt]

/* <a href="#sec-14">See clause 14</a> */
<SourceElements> :
    <SourceElement>
    <SourceElements> <SourceElement>

/* <a href="#sec-14">See clause 14</a> */
<SourceElement> :
    <Statement>
    <FunctionDeclaration>

/* <a href="#sec-15.1.3">See 15.1.3</a> */
<uri> :::
    <uriCharacters> [opt]

/* <a href="#sec-15.1.3">See 15.1.3</a> */
<uriCharacters> :::
    <uriCharacter> <uriCharacters> [opt]

/* <a href="#sec-15.1.3">See 15.1.3</a> */
<uriCharacter> :::
    <uriReserved>
    <uriUnescaped>
    <uriEscaped>

/* <a href="#sec-15.1.3">See 15.1.3</a> */
<uriReserved> ::: one of
    ";" "/" "?" ":" "@" "&" "=" "+" "$" ","

/* <a href="#sec-15.1.3">See 15.1.3</a> */
<uriUnescaped> :::
    <uriAlpha>
    <DecimalDigit>
    <uriMark>

/* <a href="#sec-15.1.3">See 15.1.3</a> */
<uriEscaped> :::
    "%" <HexDigit> <HexDigit>

/* <a href="#sec-15.1.3">See 15.1.3</a> */
<uriAlpha> ::: one of
    "a" "b" "c" "d" "e" "f" "g" "h" "i" "j" "k" "l" "m" "n" "o" "p" "q" "r" "s" "t" "u" "v" "w" "x" "y" "z"
    "A" "B" "C" "D" "E" "F" "G" "H" "I" "J" "K" "L" "M" "N" "O" "P" "Q" "R" "S" "T" "U" "V" "W" "X" "Y" "Z"

/* <a href="#sec-15.1.3">See 15.1.3</a> */
<uriMark> ::: one of
    "-" "_" "." "!" "~" "*" "`" "(" ")"

/* <a href="#sec-15.10.1">See 15.10.1</a> */
<Pattern> ::
    <Disjunction>

/* <a href="#sec-15.10.1">See 15.10.1</a> */
<Disjunction> ::
    <Alternative>
    <Alternative> "|" <Disjunction>

/* <a href="#sec-15.10.1">See 15.10.1</a> */
<Alternative> ::
    [empty]
    <Alternative> <Term>

/* <a href="#sec-15.10.1">See 15.10.1</a> */
<Term> ::
    <Assertion>
    <Atom>
    <Atom> <Quantifier>

/* <a href="#sec-15.10.1">See 15.10.1</a> */
<Assertion> ::
    "^"
    "$"
    "\\" "b"
    "\\" "B"
    "(" "?" "=" <Disjunction> ")"
    "(" "?" "!" <Disjunction> ")"

/* <a href="#sec-15.10.1">See 15.10.1</a> */
<Quantifier> ::
    <QuantifierPrefix>
    <QuantifierPrefix> "?"

/* <a href="#sec-15.10.1">See 15.10.1</a> */
<QuantifierPrefix> ::
    "*"
    "+"
    "?"
    "{" <DecimalDigits> "}"
    "{" <DecimalDigits> "," "}"
    "{" <DecimalDigits> "," <DecimalDigits> "}"

/* <a href="#sec-15.10.1">See 15.10.1</a> */
<Atom> ::
    <PatternCharacter>
    "."
    "\\" <AtomEscape>
    <CharacterClass>
    "(" <Disjunction> ")"
    "(" "?" ":" <Disjunction> ")"

/* <a href="#sec-15.10.1">See 15.10.1</a> */
<PatternCharacter> :: <SourceCharacter> but not any of:
    "^" "$" "\\" "." "*" "+" "?" "(" ")" "[" "]" "{" "}" "|"

/* <a href="#sec-15.10.1">See 15.10.1</a> */
<AtomEscape> ::
    <DecimalEscape>
    <CharacterEscape>
    <CharacterClassEscape>

/* <a href="#sec-15.10.1">See 15.10.1</a> */
<CharacterEscape> ::
    <ControlEscape>
    "c" <ControlLetter>
    <HexEscapeSequence>
    <UnicodeEscapeSequence>
    <IdentityEscape>

/* <a href="#sec-15.10.1">See 15.10.1</a> */
<ControlEscape> :: one of
    "f" "n" "r" "t" "v"

/* <a href="#sec-15.10.1">See 15.10.1</a> */
<ControlLetter> :: one of
    "a" "b" "c" "d" "e" "f" "g" "h" "i" "j" "k" "l" "m" "n" "o" "p" "q" "r" "s" "t" "u" "v" "w" "x" "y" "z"
    "A" "B" "C" "D" "E" "F" "G" "H" "I" "J" "K" "L" "M" "N" "O" "P" "Q" "R" "S" "T" "U" "V" "W" "X" "Y" "Z"

/* <a href="#sec-15.10.1">See 15.10.1</a> */
<IdentityEscape> ::
    <SourceCharacter> but not <IdentifierPart>
    <ZWJ>
    <ZWNJ>

/* <a href="#sec-15.10.1">See 15.10.1</a> */
<DecimalEscape> ::
    <DecimalIntegerLiteral> [lookahead not in DecimalDigit]

/* <a href="#sec-15.10.1">See 15.10.1</a> */
<CharacterClassEscape> :: one of
    "d" "D" "s" "S" "w" "W"

/* <a href="#sec-15.10.1">See 15.10.1</a> */
<CharacterClass> ::
    "[" [lookahead not in {^}] <ClassRanges> "]"
    "[" "^" <ClassRanges> "]"

/* <a href="#sec-15.10.1">See 15.10.1</a> */
<ClassRanges> ::
    [empty]
    <NonemptyClassRanges>

/* <a href="#sec-15.10.1">See 15.10.1</a> */
<NonemptyClassRanges> ::
    <ClassAtom>
    <ClassAtom> <NonemptyClassRangesNoDash>
    <ClassAtom> "-" <ClassAtom> <ClassRanges>

/* <a href="#sec-15.10.1">See 15.10.1</a> */
<NonemptyClassRangesNoDash> ::
    <ClassAtom>
    <ClassAtomNoDash> <NonemptyClassRangesNoDash>
    <ClassAtomNoDash> "-" <ClassAtom> <ClassRanges>

/* <a href="#sec-15.10.1">See 15.10.1</a> */
<ClassAtom> ::
    "-"
    <ClassAtomNoDash>

/* <a href="#sec-15.10.1">See 15.10.1</a> */
<ClassAtomNoDash> ::
    <SourceCharacter> but not one of "\\" or "]" or "-"
    "\\" <ClassEscape>

/* <a href="#sec-15.10.1">See 15.10.1</a> */
<ClassEscape> ::
    <DecimalEscape>
    "b"
    <CharacterEscape>
    <CharacterClassEscape>

/* <a href="#sec-15.12.1.1">See 15.12.1.1</a> */
<JSONWhiteSpace> ::
    <TAB>
    <CR>
    <LF>
    <SP>

/* <a href="#sec-15.12.1.1">See 15.12.1.1</a> */
<JSONString> ::
    "\"" <JSONStringCharacters> [opt] "\""

/* <a href="#sec-15.12.1.1">See 15.12.1.1</a> */
<JSONStringCharacters> ::
    <JSONStringCharacter> <JSONStringCharacters> [opt]

/* <a href="#sec-15.12.1.1">See 15.12.1.1</a> */
<JSONStringCharacter> ::
    <SourceCharacter> but not /* double-quote */ "\"" or /* backslash */ "\\" or /* U+0000 thru U+001F */
    "\\" <JSONEscapeSequence>

/* <a href="#sec-15.12.1.1">See 15.12.1.1</a> */
<JSONEscapeSequence> ::
    <JSONEscapeCharacter>
    <UnicodeEscapeSequence>

/* <a href="#sec-15.12.1.1">See 15.12.1.1</a> */
<JSONEscapeCharacter> :: one of
    "\"" "/" "\\" "b" "f" "n" "r" "t"

/* <a href="#sec-15.12.1.1">See 15.12.1.1</a> */
<JSONNumber> ::
    "-" [opt] <DecimalIntegerLiteral> <JSONFraction> [opt] <ExponentPart> [opt]

/* <a href="#sec-15.12.1.1">See 15.12.1.1</a> */
<JSONFraction> ::
    "." <DecimalDigits>

/* <a href="#sec-15.12.1.1">See 15.12.1.1</a> */
<JSONNullLiteral> ::
    <NullLiteral>

/* <a href="#sec-15.12.1.1">See 15.12.1.1</a> */
<JSONBooleanLiteral> ::
    <BooleanLiteral>

/* <a href="#sec-15.12.1.2">See 15.12.1.2</a> */
<JSONText> :
    <JSONValue>

/* <a href="#sec-15.12.1.2">See 15.12.1.2</a> */
<JSONValue> :
    <JSONNullLiteral>
    <JSONBooleanLiteral>
    <JSONObject>
    <JSONArray>
    <JSONString>
    <JSONNumber>

/* <a href="#sec-15.12.1.2">See 15.12.1.2</a> */
<JSONObject> :
    "{" "}"
    "{" <JSONMemberList> "}"

/* <a href="#sec-15.12.1.2">See 15.12.1.2</a> */
<JSONMember> :
    <JSONString> ":" <JSONValue>

/* <a href="#sec-15.12.1.2">See 15.12.1.2</a> */
<JSONMemberList> :
    <JSONMember>
    <JSONMemberList> "," <JSONMember>

/* <a href="#sec-15.12.1.2">See 15.12.1.2</a> */
<JSONArray> :
    "[" "]"
    "[" <JSONElementList> "]"

/* <a href="#sec-15.12.1.2">See 15.12.1.2</a> */
<JSONElementList> :
    <JSONValue>
    <JSONElementList> "," <JSONValue>

<NumericLiteral> ::
    <DecimalLiteral>
    <HexIntegerLiteral>
    <OctalIntegerLiteral>

<OctalIntegerLiteral> ::
    "0" <OctalDigit>
    <OctalIntegerLiteral> <OctalDigit>

<OctalDigit> :: one of
    "0" "1" "2" "3" "4" "5" "6" "7"

<EscapeSequence> ::
    <CharacterEscapeSequence>
    <OctalEscapeSequence>
    <HexEscapeSequence>
    <UnicodeEscapeSequence>

<OctalEscapeSequence> ::
    <OctalDigit> [lookahead not in DecimalDigit]
    <ZeroToThree> <OctalDigit> [lookahead not in DecimalDigit]
    <FourToSeven> <OctalDigit>
    <ZeroToThree> <OctalDigit> <OctalDigit>

<ZeroToThree> :: one of
    "0" "1" "2" "3"

<FourToSeven> :: one of
    "4" "5" "6" "7"

