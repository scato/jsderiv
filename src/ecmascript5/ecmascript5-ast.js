var c = require('../../lib/common');
var g = require('../../lib/generic');
var l = require('../../lib/lookahead');

var List = g.List,
    Text = g.Text;

// export constructor This, Identifier, Literal, Brackets, ArrayLiteral, ElementList, Elision, ObjectLiteral, PropertyNameAndValueList, PropertyAssignment, PropertyName, PropertySetParameterList, MemberExpression, NewExpression, CallExpression, Arguments, PostfixExpression, PrefixExpression, BinaryExpression, TernaryExpression, CommaExpression, ExpressionNoIn, Block, StatementList, VariableStatement, VariableDeclarationListNoIn, VariableDeclaration, VariableDeclarationNoIn, InitialiserNoIn, EmptyStatement, ExpressionStatement, IfStatement, IterationStatement, ContinueStatement, BreakStatement, ReturnStatement, WithStatement, SwitchStatement, CaseBlock, CaseClauses, CaseClause, DefaultClause, LabelledStatement, ThrowStatement, TryStatement, Catch, Finally, DebuggerStatement, FunctionDeclaration, FunctionExpression, FormalParameterList, FunctionBody, Program;
var This                        = exports.This                        = g.Cons("This");
var Identifier                  = exports.Identifier                  = g.Cons("Identifier");
var Literal                     = exports.Literal                     = g.Cons("Literal");
var Brackets                    = exports.Brackets                    = g.Cons("Brackets");
var ArrayLiteral                = exports.ArrayLiteral                = g.Cons("ArrayLiteral");
var ElementList                 = exports.ElementList                 = g.Cons("ElementList");
var Elision                     = exports.Elision                     = g.Cons("Elision");
var ObjectLiteral               = exports.ObjectLiteral               = g.Cons("ObjectLiteral");
var PropertyNameAndValueList    = exports.PropertyNameAndValueList    = g.Cons("PropertyNameAndValueList");
var PropertyAssignment          = exports.PropertyAssignment          = g.Cons("PropertyAssignment");
var PropertyName                = exports.PropertyName                = g.Cons("PropertyName");
var PropertySetParameterList    = exports.PropertySetParameterList    = g.Cons("PropertySetParameterList");
var MemberExpression            = exports.MemberExpression            = g.Cons("MemberExpression");
var NewExpression               = exports.NewExpression               = g.Cons("NewExpression");
var CallExpression              = exports.CallExpression              = g.Cons("CallExpression");
var Arguments                   = exports.Arguments                   = g.Cons("Arguments");
var PostfixExpression           = exports.PostfixExpression           = g.Cons("PostfixExpression");
var PrefixExpression            = exports.PrefixExpression            = g.Cons("PrefixExpression");
var BinaryExpression            = exports.BinaryExpression            = g.Cons("BinaryExpression");
var TernaryExpression           = exports.TernaryExpression           = g.Cons("TernaryExpression");
var CommaExpression             = exports.CommaExpression             = g.Cons("CommaExpression");
var ExpressionNoIn              = exports.ExpressionNoIn              = g.Cons("ExpressionNoIn");
var Block                       = exports.Block                       = g.Cons("Block");
var StatementList               = exports.StatementList               = g.Cons("StatementList");
var VariableStatement           = exports.VariableStatement           = g.Cons("VariableStatement");
var VariableDeclarationListNoIn = exports.VariableDeclarationListNoIn = g.Cons("VariableDeclarationListNoIn");
var VariableDeclaration         = exports.VariableDeclaration         = g.Cons("VariableDeclaration");
var VariableDeclarationNoIn     = exports.VariableDeclarationNoIn     = g.Cons("VariableDeclarationNoIn");
var InitialiserNoIn             = exports.InitialiserNoIn             = g.Cons("InitialiserNoIn");
var EmptyStatement              = exports.EmptyStatement              = g.Cons("EmptyStatement");
var ExpressionStatement         = exports.ExpressionStatement         = g.Cons("ExpressionStatement");
var IfStatement                 = exports.IfStatement                 = g.Cons("IfStatement");
var IterationStatement          = exports.IterationStatement          = g.Cons("IterationStatement");
var ContinueStatement           = exports.ContinueStatement           = g.Cons("ContinueStatement");
var BreakStatement              = exports.BreakStatement              = g.Cons("BreakStatement");
var ReturnStatement             = exports.ReturnStatement             = g.Cons("ReturnStatement");
var WithStatement               = exports.WithStatement               = g.Cons("WithStatement");
var SwitchStatement             = exports.SwitchStatement             = g.Cons("SwitchStatement");
var CaseBlock                   = exports.CaseBlock                   = g.Cons("CaseBlock");
var CaseClauses                 = exports.CaseClauses                 = g.Cons("CaseClauses");
var CaseClause                  = exports.CaseClause                  = g.Cons("CaseClause");
var DefaultClause               = exports.DefaultClause               = g.Cons("DefaultClause");
var LabelledStatement           = exports.LabelledStatement           = g.Cons("LabelledStatement");
var ThrowStatement              = exports.ThrowStatement              = g.Cons("ThrowStatement");
var TryStatement                = exports.TryStatement                = g.Cons("TryStatement");
var Catch                       = exports.Catch                       = g.Cons("Catch");
var Finally                     = exports.Finally                     = g.Cons("Finally");
var DebuggerStatement           = exports.DebuggerStatement           = g.Cons("DebuggerStatement");
var FunctionDeclaration         = exports.FunctionDeclaration         = g.Cons("FunctionDeclaration");
var FunctionExpression          = exports.FunctionExpression          = g.Cons("FunctionExpression");
var FormalParameterList         = exports.FormalParameterList         = g.Cons("FormalParameterList");
var FunctionBody                = exports.FunctionBody                = g.Cons("FunctionBody");
var Program                     = exports.Program                     = g.Cons("Program");
