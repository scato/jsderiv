%%%
 %% 11: Expressions
 %%%
module languages/ecmascript3/Expressions[Ctx]
exports

  %%%
   %% 11.1: Primary Expression
   %%%
  context-free syntax
    "this"        -> PrimaryExpr {cons("This")}
    Id            -> PrimaryExpr {cons("Id")}
    Literal       -> PrimaryExpr
    ArrayLiteral  -> PrimaryExpr
    ObjectLiteral -> PrimaryExpr
    "(" Expr[[AllowIn]] ")" -> PrimaryExpr

  %%%
   %% 11.1.4: Array Initialiser
   %%%
  context-free syntax
    "[" Elision?"]" -> ArrayLiteral
    "[" ElementList "]" -> ArrayLiteral
    "[" ElementList "," Elision? "]" -> ArrayLiteral

    Elision? LiteralElement -> ElementList
    ElementList "," Elision? LiteralElement -> ElementList

    AssignmentExpr[[AllowIn]] -> LiteralElement
    ","+ -> Elision

  %%%
   %% 11.1.5: Object Initialiser
   %%%
  context-free syntax
    "{" {ProperyNameAndValue ","}* "}" -> ObjectLiteral

    PropertyName ":" AssignmentExpr[[AllowIn]] -> ProperyNameAndValue
    Identifier     -> PropertyName
    StringLiteral  -> PropertyName
    NumericLiteral -> PropertyName
  
  %%%
   %% 11.2: Left-Hand-Side Expressions
   %%%
  context-free syntax
    PrimaryExpr                        -> MemberExpr
    FunctionExpr                       -> MemberExpr
    MemberExpr "[" Expr[[AllowIn]] "]" -> MemberExpr
    MemberExpr "." Identifier          -> MemberExpr
    "new" MemberExpr Arguments         -> MemberExpr

    MemberExpr    -> NewExpr
    "new" NewExpr -> NewExpr

    MemberExpr Arguments             -> CallExpr
    CallExpr   Arguments             -> CallExpr
    CallExpr "[" Expr[[AllowIn]] "]" -> CallExpr
    CallExpr "." Identifier          -> CallExpr

    "(" {AssignmentExpr[[AllowIn]] ","}+ ")" -> Arguments
    NewExpr  -> LeftHandSideExpr
    CallExpr -> LeftHandSideExpr

  %%%
   %% 11.3: Postfix Expressions
   %%
   %% @todo Layout: non line terminator
   %%%
  context-free syntax
    LeftHandSideExpr -> PostfixExpr

    LeftHandSideExpr "++" -> PostfixExpr
    LeftHandSideExpr "--" -> PostfixExpr

  %%%
   %% 11.4: Unary Expressions
   %%%
  context-free syntax
    PostfixExpr -> UnaryExpr

    "delete" UnaryExpr -> UnaryExpr
    "void" UnaryExpr   -> UnaryExpr
    "typeof" UnaryExpr -> UnaryExpr
    "++" UnaryExpr     -> UnaryExpr
    "--" UnaryExpr     -> UnaryExpr
    "+" UnaryExpr      -> UnaryExpr
    "-" UnaryExpr      -> UnaryExpr
    "~" UnaryExpr      -> UnaryExpr
    "!" UnaryExpr      -> UnaryExpr

  %%%
   %% 11.5: Multiplicative Expressions
   %%%
  context-free syntax
    UnaryExpr -> MulExpr

    MulExpr "*" UnaryExpr -> MulExpr {cons("Mul")}
    MulExpr "/" UnaryExpr -> MulExpr {cons("Div")}
    MulExpr "%" UnaryExpr -> MulExpr {cons("Remainder")}

  context-free syntax
    MulExpr -> AddExpr

    AddExpr "+" MulExpr -> MulExpr {cons("Plus")}
    AddExpr "-" MulExpr -> MulExpr {cons("Minus")}

  context-free syntax
    AddExpr -> ShiftExpr
    ShiftExpr "<<"  AddExpr -> ShiftExpr
    ShiftExpr ">>"  AddExpr -> ShiftExpr
    ShiftExpr ">>>" AddExpr -> ShiftExpr

  context-free syntax
    ShiftExpr -> RelExpr[[Ctx]]

    RelExpr[[Ctx]] "<"   ShiftExpr -> RelExpr[[Ctx]]
    RelExpr[[Ctx]] ">"   ShiftExpr -> RelExpr[[Ctx]]
    RelExpr[[Ctx]] "<="  ShiftExpr -> RelExpr[[Ctx]]
    RelExpr[[Ctx]] ">="  ShiftExpr -> RelExpr[[Ctx]]
    RelExpr[[Ctx]] "instanceof" ShiftExpr -> RelExpr[[Ctx]]

    RelExpr[[AllowIn]] "in" ShiftExpr -> RelExpr[[AllowIn]]

  context-free syntax
    RelExpr[[Ctx]] -> EqExpr[[Ctx]]

    EqExpr[[Ctx]] "=="  RelExpr[[Ctx]] -> EqExpr[[Ctx]]
    EqExpr[[Ctx]] "!="  RelExpr[[Ctx]] -> EqExpr[[Ctx]]
    EqExpr[[Ctx]] "===" RelExpr[[Ctx]] -> EqExpr[[Ctx]]
    EqExpr[[Ctx]] "!==" RelExpr[[Ctx]] -> EqExpr[[Ctx]]

  context-free syntax
    EqExpr[[Ctx]] -> BitwiseAndExpr[[Ctx]]
    BitwiseAndExpr[[Ctx]] "&" EqExpr[[Ctx]] -> BitwiseAndExpr[[Ctx]]

    BitwiseAndExpr[[Ctx]] -> BitwiseXorExpr[[Ctx]]
    BitwiseXorExpr[[Ctx]] "^" BitwiseAndExpr[[Ctx]] -> BitwiseXorExpr[[Ctx]]

    BitwiseXorExpr[[Ctx]] -> BitwiseOrExpr[[Ctx]]
    BitwiseOrExpr[[Ctx]] "|" BitwiseXorExpr[[Ctx]] -> BitwiseOrExpr[[Ctx]]

  context-free syntax
    BitwiseOrExpr[[Ctx]] -> LogicalAndExpr[[Ctx]]
    LogicalAndExpr[[Ctx]] "&&" BitwiseOrExpr[[Ctx]] -> LogicalAndExpr[[Ctx]]

    LogicalAndExpr[[Ctx]] -> LogicalOrExpr[[Ctx]]
    LogicalOrExpr[[Ctx]] "||" LogicalAndExpr[[Ctx]] -> LogicalOrExpr[[Ctx]]

    LogicalOrExpr[[Ctx]] -> ConditionalExpr[[Ctx]]
    LogicalOrExpr[[Ctx]] "?" AssignmentExpr[[Ctx]] ":" AssignmentExpr[[Ctx]] -> ConditionalExpr[[Ctx]]

  context-free syntax
    ConditionalExpr[[Ctx]] -> AssignmentExpr[[Ctx]]

    LeftHandSideExpr "=" AssignmentExpr[[Ctx]]
    LeftHandSideExpr CompoundAssignment AssignmentExpr[[Ctx]]

    "*=" -> CompoundAssignment
    "/=" -> CompoundAssignment
    "%=" -> CompoundAssignment
    "+=" -> CompoundAssignment
    "-=" -> CompoundAssignment
    "<<=" -> CompoundAssignment
    ">>=" -> CompoundAssignment
    ">>>=" -> CompoundAssignment
    "&=" -> CompoundAssignment
    "^=" -> CompoundAssignment
    "|=" -> CompoundAssignment

  context-free syntax
    AssignmentExpr[[Ctx]]                 -> Expr[[Ctx]]
    Expr[[Ctx]] "," AssignmentExpr[[Ctx]] -> Expr[[Ctx]]

  %%%
   %% Default expression context
   %%%
  context-free syntax
    Expr[[AllowIn]] -> Expr

  context-free syntax
    Expr[[AllowIn]] -> OptionalExpr
                    -> OptionalExpr

